from Crypto.Util.number import long_to_bytes, inverse

def solve():
    k = 384
    p_high1 = 3313130543661256759619376780947997928704480355515563249174
    q_low1 = 327308129172296188800914540836871080824918802548358947694364589812665006806690750728399
    n1 = 736462633465699378295661543473291147816240274462784306850458141934563962117468542846291136133358306423426704210644984093191119199817456847864024734754492352833204324613985779658585136628285597700263167884955606970130717400027484801
    enc_flag1 = 612950598821319930744507885814554744380639614281021250883511616164220014080456392597162619681038897881793571107147050510196142938907875806432356669941961731070225018761869260161398220107407578572086195622184776617355054033205100517
    p_high2 = 4493231435924949922964345553712458322339518696632249179629
    q_low2 = 464728936835511676715213859154478720551208338304326371735028771910757200494389775137279
    n2 = 982523807460626536087454959475595441535191790391347732734249678371634774658225421970921715217545849914905936307518454497563204215980164604291194312239234122132345259879971737875908934286926188382956119983407912391454392689579081581
    enc_flag2 = 168411889514409621094270999919132062965798833331993157250797807529453526967340838751210713243593315146141818587673516226470553865770905334804558598347832447852303986318386689269047901701019712809601622631744841865409160594117173168
    def decrypt(p_high, q_low, n, enc_flag):
        try:
            inv_q_low = inverse(q_low, 2**288)
        except ValueError:
            temp_q_low = q_low
            temp_mod = 2**288
            power = 0
            while temp_q_low % 2 == 0:
                temp_q_low //= 2
                temp_mod //= 2
                power += 1
            inv_q_low = inverse(temp_q_low, temp_mod)
            p0_part = (n * inv_q_low) % temp_mod
            p0 = p0_part * (2**power) % (2**288)
            p0 = p0 % (2**192)
        else:
            p0 = (n * inv_q_low) % (2**288)
            p0 = p0 % (2**192)
        p = (p_high << (k//2)) + p0
        if n % p == 0:
            q = n // p
        else:
            for delta in [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]:
                p0_candidate = (p0 + delta) % (2**192)
                p_candidate = (p_high << (k//2)) + p0_candidate
                if n % p_candidate == 0:
                    p = p_candidate
                    q = n // p
                    break
            else:
                print("Failed to factor n")
                return None
        phi = (p-1)*(q-1)
        e = 65537
        d = pow(e, -1, phi)
        flag = pow(enc_flag, d, n)
        return long_to_bytes(flag).decode()
    flag1 = decrypt(p_high1, q_low1, n1, enc_flag1)
    flag2 = decrypt(p_high2, q_low2, n2, enc_flag2)
    
    print("First flag:", flag1)
    print("Second flag:", flag2)

solve()
